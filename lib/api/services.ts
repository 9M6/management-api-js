// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type { $OpenApiTs } from "./models";

export class Oauth {
  /**
   * Get User Profile
   * Contains the id, names and email of the currently logged in user.
   *
   * @returns user_profile Details of logged in user V1.
   * @throws ApiError
   */
  public static getUser(): CancelablePromise<
    $OpenApiTs["/oauth2/user_profile"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/oauth2/user_profile",
      errors: {
        403: `Invalid credentials.`,
      },
    });
  }

  /**
   * Get token details
   * Retrieve information about the provided token.
   * @returns token_introspect Details of the token.
   * @throws ApiError
   */
  public static tokenIntrospection(
    data: $OpenApiTs["/oauth2/introspect"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/oauth2/introspect"]["post"]["res"][200]> {
    const { formData } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/oauth2/introspect",
      formData: formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        401: `Bad request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Revoke token
   * Revoke a previously issued token.
   * @returns any Token successfully revoked.
   * @throws ApiError
   */
  public static tokenRevocation(
    data: $OpenApiTs["/oauth2/revoke"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/oauth2/revoke"]["post"]["res"][200]> {
    const { formData } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/oauth2/revoke",
      formData: formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        401: `Bad request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Returns the details of the currently logged in user
   * Contains the id, names, profile picture URL and email of the currently logged in user.
   *
   * @returns user_profile_v2 Details of logged in user V2.
   * @throws ApiError
   */
  public static getUserProfileV2(): CancelablePromise<
    $OpenApiTs["/oauth2/v2/user_profile"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/oauth2/v2/user_profile",
      errors: {
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }
}

export class Users {
  /**
   * List Users
   * The returned list can be sorted by full name or email address
   * in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query
   * string parameter.
   *
   * @returns users_response Users successfully retrieved.
   * @throws ApiError
   */
  public static getUsers(
    data: $OpenApiTs["/api/v1/users"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/api/v1/users"]["get"]["res"][200]> {
    const { pageSize, userId, nextToken, email, expand } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users",
      query: {
        page_size: pageSize,
        user_id: userId,
        next_token: nextToken,
        email,
        expand,
      },
      errors: {
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Refresh User Claims and Invalidate Cache
   * Refreshes the user's claims and invalidates the current cache.
   *
   * @returns success_response Claims successfully refreshed.
   * @throws ApiError
   */
  public static refreshUserClaims(
    data: $OpenApiTs["/api/v1/users/{user_id}/refresh_claims"]["post"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/users/{user_id}/refresh_claims"]["post"]["res"][200]
  > {
    const { userId } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/{user_id}/refresh_claims",
      path: {
        user_id: userId,
      },
      errors: {
        400: `Bad request.`,
        403: `Bad request.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Get User
   * Retrieve a user record.
   *
   * @returns user User successfully updated.
   * @throws ApiError
   */
  public static getUserData(
    data: $OpenApiTs["/api/v1/user"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/api/v1/user"]["get"]["res"][200]> {
    const { id, expand } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/user",
      query: {
        id,
        expand,
      },
      errors: {
        400: `Bad request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Create User
   * Creates a user record and optionally zero or more identities for the user. An example identity could be the email
   * address of the user.
   *
   * @returns create_user_response User successfully created.
   * @throws ApiError
   */
  public static createUser(
    data: $OpenApiTs["/api/v1/user"]["post"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/api/v1/user"]["post"]["res"][200]> {
    const { requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/user",
      body: requestBody,
      mediaType: "application/json",
      errors: {
        400: `Error creating user.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Update User
   * Update a user record.
   *
   * @returns update_user_response User successfully updated.
   * @throws ApiError
   */
  public static updateUser(
    data: $OpenApiTs["/api/v1/user"]["patch"]["req"],
  ): CancelablePromise<$OpenApiTs["/api/v1/user"]["patch"]["res"][200]> {
    const { id, requestBody } = data;
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/user",
      query: {
        id,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        400: `Bad request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Delete User
   * Delete a user record.
   *
   * @returns success_response User successfully deleted.
   * @throws ApiError
   */
  public static deleteUser(
    data: $OpenApiTs["/api/v1/user"]["delete"]["req"],
  ): CancelablePromise<$OpenApiTs["/api/v1/user"]["delete"]["res"][200]> {
    const { id, isDeleteProfile } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/user",
      query: {
        id,
        is_delete_profile: isDeleteProfile,
      },
      errors: {
        400: `Bad request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Update User Feature Flag Override
   * Update user feature flag override.
   * @returns success_response Feature flag override successfully updated.
   * @throws ApiError
   */
  public static updateUserFeatureFlagOverride(
    data: $OpenApiTs["/api/v1/users/{user_id}/feature_flags/{feature_flag_key}"]["patch"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/users/{user_id}/feature_flags/{feature_flag_key}"]["patch"]["res"][200]
  > {
    const { userId, featureFlagKey, value } = data;
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}/feature_flags/{feature_flag_key}",
      path: {
        user_id: userId,
        feature_flag_key: featureFlagKey,
      },
      query: {
        value,
      },
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }
}

export class Subscribers {
  /**
   * List Subscribers
   * The returned list can be sorted by full name or email address
   * in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query
   * string parameter.
   *
   * @returns get_subscribers_response Subscriber successfully retrieved.
   * @throws ApiError
   */
  public static getSubscribers(
    data: $OpenApiTs["/api/v1/subscribers"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/api/v1/subscribers"]["get"]["res"][200]> {
    const { sort, pageSize, nextToken } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/subscribers",
      query: {
        sort,
        page_size: pageSize,
        next_token: nextToken,
      },
      errors: {
        403: `Bad request.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Create Subscriber
   * Create subscriber.
   * @returns create_subscriber_success_response Subscriber successfully created
   * @throws ApiError
   */
  public static createSubscriber(
    data: $OpenApiTs["/api/v1/subscribers"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/api/v1/subscribers"]["post"]["res"][201]> {
    const { firstName, lastName, email } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/subscribers",
      query: {
        first_name: firstName,
        last_name: lastName,
        email,
      },
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Get Subscriber
   * Retrieve a subscriber record.
   *
   * @returns get_subscriber_response Subscriber successfully retrieved.
   * @throws ApiError
   */
  public static getSubscriber(
    data: $OpenApiTs["/api/v1/subscribers/{subscriber_id}"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/subscribers/{subscriber_id}"]["get"]["res"][200]
  > {
    const { subscriberId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/subscribers/{subscriber_id}",
      path: {
        subscriber_id: subscriberId,
      },
      errors: {
        400: `Bad request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }
}

export class Organizations {
  /**
   * Get Organization
   * Gets an organization given the organization's code.
   *
   * @returns organization Organization successfully retrieved.
   * @throws ApiError
   */
  public static getOrganization(
    data: $OpenApiTs["/api/v1/organization"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/api/v1/organization"]["get"]["res"][200]> {
    const { code } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/organization",
      query: {
        code,
      },
      errors: {
        400: `Bad request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Create Organization
   * Create an organization.
   * @returns create_organization_response Organization successfully created.
   * @throws ApiError
   */
  public static createOrganization(
    data: $OpenApiTs["/api/v1/organization"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/api/v1/organization"]["post"]["res"][200]> {
    const { requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/organization",
      body: requestBody,
      mediaType: "application/json",
      errors: {
        400: `Error creating user.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
        500: `Could not create organization.`,
      },
    });
  }

  /**
   * Update Organization
   * Update an organization.
   * @returns success_response Organization successfully updated.
   * @throws ApiError
   */
  public static updateOrganization(
    data: $OpenApiTs["/api/v1/organization/{org_code}"]["patch"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/organization/{org_code}"]["patch"]["res"][200]
  > {
    const { orgCode, requestBody } = data;
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/organization/{org_code}",
      path: {
        org_code: orgCode,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        400: `Error updating organization.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Delete Organization
   * Delete an organization.
   * @returns any Organization successfully deleted.
   * @throws ApiError
   */
  public static deleteOrganization(
    data: $OpenApiTs["/api/v1/organization/{org_code}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/organization/{org_code}"]["delete"]["res"][200]
  > {
    const { orgCode } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/organization/{org_code}",
      path: {
        org_code: orgCode,
      },
      errors: {
        400: `Error deleting organization.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * List Organizations
   * Get a list of organizations.
   *
   * @returns get_organizations_response A successful response with a list of organizations or an empty list.
   * @throws ApiError
   */
  public static getOrganizations(
    data: $OpenApiTs["/api/v1/organizations"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/api/v1/organizations"]["get"]["res"][200]> {
    const { sort, pageSize, nextToken } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/organizations",
      query: {
        sort,
        page_size: pageSize,
        next_token: nextToken,
      },
      errors: {
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * List Organization Users
   * Get users in an organization.
   * @returns get_organization_users_response A successful response with a list of organization users or an empty list.
   * @throws ApiError
   */
  public static getOrganizationUsers(
    data: $OpenApiTs["/api/v1/organizations/{org_code}/users"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/organizations/{org_code}/users"]["get"]["res"][200]
  > {
    const { orgCode, sort, pageSize, nextToken, permissions, roles } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/organizations/{org_code}/users",
      path: {
        org_code: orgCode,
      },
      query: {
        sort,
        page_size: pageSize,
        next_token: nextToken,
        permissions,
        roles,
      },
      errors: {
        400: `Error creating user`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Add Organization Users
   * Add existing users to an organization.
   * @returns add_organization_users_response Users successfully added.
   * @returns void No users added.
   * @throws ApiError
   */
  public static addOrganizationUsers(
    data: $OpenApiTs["/api/v1/organizations/{org_code}/users"]["post"]["req"],
  ): CancelablePromise<
    | $OpenApiTs["/api/v1/organizations/{org_code}/users"]["post"]["res"][200]
    | $OpenApiTs["/api/v1/organizations/{org_code}/users"]["post"]["res"][204]
  > {
    const { orgCode, requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/organizations/{org_code}/users",
      path: {
        org_code: orgCode,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        400: `Bad request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Update Organization Users
   * Update users that belong to an organization.
   * @returns update_organization_users_response Users successfully removed.
   * @throws ApiError
   */
  public static updateOrganizationUsers(
    data: $OpenApiTs["/api/v1/organizations/{org_code}/users"]["patch"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/organizations/{org_code}/users"]["patch"]["res"][200]
  > {
    const { orgCode, requestBody } = data;
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/organizations/{org_code}/users",
      path: {
        org_code: orgCode,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        400: `Error updating organization user.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * List Organization User Roles
   * Get roles for an organization user.
   * @returns get_organizations_user_roles_response A successful response with a list of user roles.
   * @throws ApiError
   */
  public static getOrganizationUserRoles(
    data: $OpenApiTs["/api/v1/organizations/{org_code}/users/{user_id}/roles"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/organizations/{org_code}/users/{user_id}/roles"]["get"]["res"][200]
  > {
    const { orgCode, userId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/organizations/{org_code}/users/{user_id}/roles",
      path: {
        org_code: orgCode,
        user_id: userId,
      },
      errors: {
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Add Organization User Role
   * Add role to an organization user.
   * @returns success_response Role successfully added.
   * @throws ApiError
   */
  public static createOrganizationUserRole(
    data: $OpenApiTs["/api/v1/organizations/{org_code}/users/{user_id}/roles"]["post"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/organizations/{org_code}/users/{user_id}/roles"]["post"]["res"][200]
  > {
    const { orgCode, userId, requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/organizations/{org_code}/users/{user_id}/roles",
      path: {
        org_code: orgCode,
        user_id: userId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Delete Organization User Role
   * Delete role for an organization user.
   * @returns success_response User successfully removed.
   * @throws ApiError
   */
  public static deleteOrganizationUserRole(
    data: $OpenApiTs["/api/v1/organizations/{org_code}/users/{user_id}/roles/{role_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/organizations/{org_code}/users/{user_id}/roles/{role_id}"]["delete"]["res"][200]
  > {
    const { orgCode, userId, roleId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/organizations/{org_code}/users/{user_id}/roles/{role_id}",
      path: {
        org_code: orgCode,
        user_id: userId,
        role_id: roleId,
      },
      errors: {
        400: `Error creating user.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * List Organization User Permissions
   * Get permissions for an organization user.
   * @returns get_organizations_user_permissions_response A successful response with a list of user permissions.
   * @throws ApiError
   */
  public static getOrganizationUserPermissions(
    data: $OpenApiTs["/api/v1/organizations/{org_code}/users/{user_id}/permissions"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/organizations/{org_code}/users/{user_id}/permissions"]["get"]["res"][200]
  > {
    const { orgCode, userId, expand } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/organizations/{org_code}/users/{user_id}/permissions",
      path: {
        org_code: orgCode,
        user_id: userId,
      },
      query: {
        expand,
      },
      errors: {
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Add Organization User Permission
   * Add permission to an organization user.
   * @returns success_response User permission successfully updated.
   * @throws ApiError
   */
  public static createOrganizationUserPermission(
    data: $OpenApiTs["/api/v1/organizations/{org_code}/users/{user_id}/permissions"]["post"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/organizations/{org_code}/users/{user_id}/permissions"]["post"]["res"][200]
  > {
    const { orgCode, userId, requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/organizations/{org_code}/users/{user_id}/permissions",
      path: {
        org_code: orgCode,
        user_id: userId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Delete Organization User Permission
   * Delete permission for an organization user.
   * @returns success_response User successfully removed.
   * @throws ApiError
   */
  public static deleteOrganizationUserPermission(
    data: $OpenApiTs["/api/v1/organizations/{org_code}/users/{user_id}/permissions/{permission_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/organizations/{org_code}/users/{user_id}/permissions/{permission_id}"]["delete"]["res"][200]
  > {
    const { orgCode, userId, permissionId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/organizations/{org_code}/users/{user_id}/permissions/{permission_id}",
      path: {
        org_code: orgCode,
        user_id: userId,
        permission_id: permissionId,
      },
      errors: {
        400: `Error creating user.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Remove Organization User
   * Remove user from an organization.
   * @returns success_response User successfully removed from organization
   * @throws ApiError
   */
  public static removeOrganizationUser(
    data: $OpenApiTs["/api/v1/organizations/{org_code}/users/{user_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/organizations/{org_code}/users/{user_id}"]["delete"]["res"][200]
  > {
    const { orgCode, userId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/organizations/{org_code}/users/{user_id}",
      path: {
        org_code: orgCode,
        user_id: userId,
      },
      errors: {
        400: `Error removing user`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * List Organization Feature Flags
   * Get all organization feature flags.
   * @returns get_organization_feature_flags_response Feature flag overrides successfully returned.
   * @throws ApiError
   */
  public static getOrganizationFeatureFlags(
    data: $OpenApiTs["/api/v1/organizations/{org_code}/feature_flags"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/organizations/{org_code}/feature_flags"]["get"]["res"][200]
  > {
    const { orgCode } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/organizations/{org_code}/feature_flags",
      path: {
        org_code: orgCode,
      },
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Delete Organization Feature Flag Overrides
   * Delete all organization feature flag overrides.
   * @returns success_response Feature flag overrides successfully deleted.
   * @throws ApiError
   */
  public static deleteOrganizationFeatureFlagOverrides(
    data: $OpenApiTs["/api/v1/organizations/{org_code}/feature_flags"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/organizations/{org_code}/feature_flags"]["delete"]["res"][200]
  > {
    const { orgCode } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/organizations/{org_code}/feature_flags",
      path: {
        org_code: orgCode,
      },
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Delete Organization Feature Flag Override
   * Delete organization feature flag override.
   * @returns success_response Feature flag override successfully deleted.
   * @throws ApiError
   */
  public static deleteOrganizationFeatureFlagOverride(
    data: $OpenApiTs["/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}"]["delete"]["res"][200]
  > {
    const { orgCode, featureFlagKey } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}",
      path: {
        org_code: orgCode,
        feature_flag_key: featureFlagKey,
      },
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Update Organization Feature Flag Override
   * Update organization feature flag override.
   * @returns success_response Feature flag override successfully updated.
   * @throws ApiError
   */
  public static updateOrganizationFeatureFlagOverride(
    data: $OpenApiTs["/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}"]["patch"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}"]["patch"]["res"][200]
  > {
    const { orgCode, featureFlagKey, value } = data;
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}",
      path: {
        org_code: orgCode,
        feature_flag_key: featureFlagKey,
      },
      query: {
        value,
      },
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }
}

export class ConnectedApps {
  /**
   * Get Connected App URL
   * Get a URL that authenticates and authorizes a user to a third-party connected app.
   * @returns connected_apps_auth_url A URL that can be used to authenticate and a session id to identify this authentication session.
   * @throws ApiError
   */
  public static getConnectedAppAuthUrl(
    data: $OpenApiTs["/api/v1/connected_apps/auth_url"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/connected_apps/auth_url"]["get"]["res"][200]
  > {
    const { keyCodeRef, userId, orgCode } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/connected_apps/auth_url",
      query: {
        key_code_ref: keyCodeRef,
        user_id: userId,
        org_code: orgCode,
      },
      errors: {
        400: `Error retrieving connected app auth url.`,
        403: `Invalid credentials.`,
        404: `Error retrieving connected app auth url.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Get Connected App Token
   * Get an access token that can be used to call the third-party provider linked to the connected app.
   * @returns connected_apps_access_token An access token that can be used to query a third-party provider, as well as the token's expiry time.
   * @throws ApiError
   */
  public static getConnectedAppToken(
    data: $OpenApiTs["/api/v1/connected_apps/token"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/connected_apps/token"]["get"]["res"][200]
  > {
    const { sessionId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/connected_apps/token",
      query: {
        session_id: sessionId,
      },
      errors: {
        400: `The session id provided points to an invalid session.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Revoke Connected App Token
   * Revoke the tokens linked to the connected app session.
   * @returns success_response An access token that can be used to query a third-party provider, as well as the token's expiry time.
   * @throws ApiError
   */
  public static revokeConnectedAppToken(
    data: $OpenApiTs["/api/v1/connected_apps/revoke"]["post"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/connected_apps/revoke"]["post"]["res"][200]
  > {
    const { sessionId } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/connected_apps/revoke",
      query: {
        session_id: sessionId,
      },
      errors: {
        400: `Bad request.`,
        403: `Invalid credentials.`,
        405: `Invalid HTTP method used.`,
        429: `Request was throttled.`,
      },
    });
  }
}

export class FeatureFlags {
  /**
   * Create Feature Flag
   * Create feature flag.
   * @returns success_response Feature flag successfully created
   * @throws ApiError
   */
  public static createFeatureFlag(
    data: $OpenApiTs["/api/v1/feature_flags"]["post"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/feature_flags"]["post"]["res"][201]
  > {
    const { requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/feature_flags",
      body: requestBody,
      mediaType: "application/json",
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Delete Feature Flag
   * Delete feature flag
   * @returns success_response Feature flag successfully updated.
   * @throws ApiError
   */
  public static deleteFeatureFlag(
    data: $OpenApiTs["/api/v1/feature_flags/{feature_flag_key}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/feature_flags/{feature_flag_key}"]["delete"]["res"][200]
  > {
    const { featureFlagKey } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/feature_flags/{feature_flag_key}",
      path: {
        feature_flag_key: featureFlagKey,
      },
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Replace Feature Flag
   * Update feature flag.
   * @returns success_response Feature flag successfully updated.
   * @throws ApiError
   */
  public static updateFeatureFlag(
    data: $OpenApiTs["/api/v1/feature_flags/{feature_flag_key}"]["put"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/feature_flags/{feature_flag_key}"]["put"]["res"][200]
  > {
    const {
      featureFlagKey,
      name,
      description,
      type,
      allowOverrideLevel,
      defaultValue,
    } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/feature_flags/{feature_flag_key}",
      path: {
        feature_flag_key: featureFlagKey,
      },
      query: {
        name,
        description,
        type,
        allow_override_level: allowOverrideLevel,
        default_value: defaultValue,
      },
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }
}

export class Environments {
  /**
   * Delete Environment Feature Flag Overrides
   * Delete all environment feature flag overrides.
   * @returns success_response Feature flag overrides deleted successfully.
   * @throws ApiError
   */
  public static deleteEnvironementFeatureFlagOverrides(): CancelablePromise<
    $OpenApiTs["/api/v1/environment/feature_flags"]["delete"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/environment/feature_flags",
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * List Environment Feature Flags
   * Get environment feature flags.
   * @returns get_environment_feature_flags_response Feature flags retrieved successfully.
   * @throws ApiError
   */
  public static getEnvironementFeatureFlags(): CancelablePromise<
    $OpenApiTs["/api/v1/environment/feature_flags"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/environment/feature_flags",
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Delete Environment Feature Flag Override
   * Delete environment feature flag override.
   * @returns success_response Feature flag deleted successfully.
   * @throws ApiError
   */
  public static deleteEnvironementFeatureFlagOverride(
    data: $OpenApiTs["/api/v1/environment/feature_flags/{feature_flag_key}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/environment/feature_flags/{feature_flag_key}"]["delete"]["res"][200]
  > {
    const { featureFlagKey } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/environment/feature_flags/{feature_flag_key}",
      path: {
        feature_flag_key: featureFlagKey,
      },
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Update Environment Feature Flag Override
   * Update environment feature flag override.
   * @returns success_response Feature flag override successful
   * @throws ApiError
   */
  public static updateEnvironementFeatureFlagOverride(
    data: $OpenApiTs["/api/v1/environment/feature_flags/{feature_flag_key}"]["patch"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/environment/feature_flags/{feature_flag_key}"]["patch"]["res"][200]
  > {
    const { featureFlagKey, requestBody } = data;
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/environment/feature_flags/{feature_flag_key}",
      path: {
        feature_flag_key: featureFlagKey,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }
}

export class Permissions {
  /**
   * List Permissions
   * The returned list can be sorted by permission name or permission ID in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter.
   *
   * @returns get_permissions_response Permissions successfully retrieved.
   * @throws ApiError
   */
  public static getPermissions(
    data: $OpenApiTs["/api/v1/permissions"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/api/v1/permissions"]["get"]["res"][200]> {
    const { sort, pageSize, nextToken } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/permissions",
      query: {
        sort,
        page_size: pageSize,
        next_token: nextToken,
      },
      errors: {
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Create Permission
   * Create a new permission.
   * @returns success_response Permission successfully created
   * @throws ApiError
   */
  public static createPermission(
    data: $OpenApiTs["/api/v1/permissions"]["post"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/api/v1/permissions"]["post"]["res"][201]> {
    const { requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/permissions",
      body: requestBody,
      mediaType: "application/json",
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Update Permission
   * Update permission
   * @returns success_response Permission successfully updated
   * @throws ApiError
   */
  public static updatePermissions(
    data: $OpenApiTs["/api/v1/permissions/{permission_id}"]["patch"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/permissions/{permission_id}"]["patch"]["res"][201]
  > {
    const { permissionId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/permissions/{permission_id}",
      path: {
        permission_id: permissionId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Delete Permission
   * Delete permission
   * @returns success_response permission successfully updated.
   * @throws ApiError
   */
  public static deletePermission(
    data: $OpenApiTs["/api/v1/permissions/{permission_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/permissions/{permission_id}"]["delete"]["res"][200]
  > {
    const { permissionId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/permissions/{permission_id}",
      path: {
        permission_id: permissionId,
      },
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }
}

export class Roles {
  /**
   * List Roles
   * The returned list can be sorted by role name or role ID in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter.
   *
   * @returns get_roles_response Roles successfully retrieved.
   * @throws ApiError
   */
  public static getRoles(
    data: $OpenApiTs["/api/v1/roles"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/api/v1/roles"]["get"]["res"][200]> {
    const { sort, pageSize, nextToken } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/roles",
      query: {
        sort,
        page_size: pageSize,
        next_token: nextToken,
      },
      errors: {
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Create Role
   * Create role.
   * @returns success_response Role successfully created
   * @throws ApiError
   */
  public static createRole(
    data: $OpenApiTs["/api/v1/roles"]["post"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/api/v1/roles"]["post"]["res"][201]> {
    const { requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/roles",
      body: requestBody,
      mediaType: "application/json",
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
      },
    });
  }

  /**
   * Get Role Permissions
   * Get permissions for a role.
   * @returns roles_permission_response A list of permissions for a role
   * @throws ApiError
   */
  public static getRolePermission(
    data: $OpenApiTs["/api/v1/roles/{role_id}/permissions"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/roles/{role_id}/permissions"]["get"]["res"][200]
  > {
    const { roleId, sort, pageSize, nextToken } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/roles/{role_id}/permissions",
      path: {
        role_id: roleId,
      },
      query: {
        sort,
        page_size: pageSize,
        next_token: nextToken,
      },
      errors: {
        400: `Error removing user`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Update Role Permissions
   * Update role permissions.
   *
   * @returns update_role_permissions_response Permissions successfully updated.
   * @throws ApiError
   */
  public static updateRolePermissions(
    data: $OpenApiTs["/api/v1/roles/{role_id}/permissions"]["patch"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/roles/{role_id}/permissions"]["patch"]["res"][200]
  > {
    const { roleId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/roles/{role_id}/permissions",
      path: {
        role_id: roleId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Remove Role Permission
   * Remove a permission from a role.
   * @returns success_response Permission successfully removed from role
   * @throws ApiError
   */
  public static removeRolePermission(
    data: $OpenApiTs["/api/v1/roles/{role_id}/permissions/{permission_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/roles/{role_id}/permissions/{permission_id}"]["delete"]["res"][200]
  > {
    const { roleId, permissionId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/roles/{role_id}/permissions/{permission_id}",
      path: {
        role_id: roleId,
        permission_id: permissionId,
      },
      errors: {
        400: `Error removing user`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Update Role
   * Update a role
   * @returns success_response Role successfully updated
   * @throws ApiError
   */
  public static updateRoles(
    data: $OpenApiTs["/api/v1/roles/{role_id}"]["patch"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/roles/{role_id}"]["patch"]["res"][201]
  > {
    const { roleId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/roles/{role_id}",
      path: {
        role_id: roleId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Delete Role
   * Delete role
   * @returns success_response Role successfully deleted.
   * @throws ApiError
   */
  public static deleteRole(
    data: $OpenApiTs["/api/v1/roles/{role_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/roles/{role_id}"]["delete"]["res"][200]
  > {
    const { roleId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/roles/{role_id}",
      path: {
        role_id: roleId,
      },
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }
}

export class Business {
  /**
   * List business details
   * Get your business details.
   * @returns success_response A successful response with your business details.
   * @throws ApiError
   */
  public static getBusiness(
    data: $OpenApiTs["/api/v1/business"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/api/v1/business"]["get"]["res"][201]> {
    const {
      code,
      name,
      email,
      phone,
      industry,
      timezone,
      privacyUrl,
      termsUrl,
    } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/business",
      query: {
        code,
        name,
        email,
        phone,
        industry,
        timezone,
        privacy_url: privacyUrl,
        terms_url: termsUrl,
      },
      errors: {
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Update business details
   * Update business details.
   * @returns success_response Business successfully updated.
   * @throws ApiError
   */
  public static updateBusiness(
    data: $OpenApiTs["/api/v1/business"]["patch"]["req"],
  ): CancelablePromise<$OpenApiTs["/api/v1/business"]["patch"]["res"][201]> {
    const {
      businessName,
      primaryEmail,
      primaryPhone,
      industryKey,
      timezoneId,
      privacyUrl,
      termsUrl,
      isShowKindeBranding,
      isClickWrap,
      partnerCode,
    } = data;
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/business",
      query: {
        business_name: businessName,
        primary_email: primaryEmail,
        primary_phone: primaryPhone,
        industry_key: industryKey,
        timezone_id: timezoneId,
        privacy_url: privacyUrl,
        terms_url: termsUrl,
        is_show_kinde_branding: isShowKindeBranding,
        is_click_wrap: isClickWrap,
        partner_code: partnerCode,
      },
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }
}

export class Industries {
  /**
   * List industries and industry keys.
   * Get a list of industries and associated industry keys.
   * @returns success_response A successful response with a list of industries and industry keys.
   * @throws ApiError
   */
  public static getIndustries(
    data: $OpenApiTs["/api/v1/industries"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/api/v1/industries"]["get"]["res"][201]> {
    const { industryKey, name } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/industries",
      query: {
        industry_key: industryKey,
        name,
      },
      errors: {
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }
}

export class Timezones {
  /**
   * List timezones and timezone IDs.
   * Get a list of timezones and associated timezone keys.
   * @returns success_response A successful response with a list of timezones and timezone keys.
   * @throws ApiError
   */
  public static getTimezones(
    data: $OpenApiTs["/api/v1/timezones"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/api/v1/timezones"]["get"]["res"][201]> {
    const { timezoneKey, name } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/timezones",
      query: {
        timezone_key: timezoneKey,
        name,
      },
      errors: {
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }
}

export class Applications {
  /**
   * List Applications
   * Get a list of applications.
   *
   * @returns get_applications_response A successful response with a list of applications or an empty list.
   * @throws ApiError
   */
  public static getApplications(
    data: $OpenApiTs["/api/v1/applications"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/api/v1/applications"]["get"]["res"][200]> {
    const { sort, pageSize, nextToken } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/applications",
      query: {
        sort,
        page_size: pageSize,
        next_token: nextToken,
      },
      errors: {
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Create Application
   * Create an application.
   * @returns create_application_response Application successfully created.
   * @throws ApiError
   */
  public static createApplication(
    data: $OpenApiTs["/api/v1/applications"]["post"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/api/v1/applications"]["post"]["res"][200]> {
    const { requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/applications",
      body: requestBody,
      mediaType: "application/json",
      errors: {
        400: `Error creating user.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Get Application
   * Gets an application given the application's id.
   *
   * @returns get_application_response Application successfully retrieved.
   * @throws ApiError
   */
  public static getApplication(
    data: $OpenApiTs["/api/v1/applications/{application_id}"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/applications/{application_id}"]["get"]["res"][200]
  > {
    const { applicationId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/applications/{application_id}",
      path: {
        application_id: applicationId,
      },
      errors: {
        400: `Bad request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Update Application
   * Update an application.
   * @returns any Application successfully updated.
   * @throws ApiError
   */
  public static updateApplication(
    data: $OpenApiTs["/api/v1/applications/{application_id}"]["patch"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/applications/{application_id}"]["patch"]["res"][200]
  > {
    const { applicationId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/applications/{application_id}",
      path: {
        application_id: applicationId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        400: `Bad request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Delete Application
   * Delete application.
   *
   * @returns success_response Application successfully deleted.
   * @throws ApiError
   */
  public static deleteApplication(
    data: $OpenApiTs["/api/v1/applications/{application_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/applications/{application_id}"]["delete"]["res"][200]
  > {
    const { applicationId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/applications/{application_id}",
      path: {
        application_id: applicationId,
      },
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }
}

export class Callbacks {
  /**
   * List Callback URLs
   * Returns an application's redirect callback URLs.
   *
   * @returns redirect_callback_urls Callback URLs successfully retrieved.
   * @throws ApiError
   */
  public static getCallbackUrLs(
    data: $OpenApiTs["/api/v1/applications/{app_id}/auth_redirect_urls"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/applications/{app_id}/auth_redirect_urls"]["get"]["res"][200]
  > {
    const { appId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/applications/{app_id}/auth_redirect_urls",
      path: {
        app_id: appId,
      },
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Add Redirect Callback URLs
   * Add additional redirect callback URLs.
   *
   * @returns success_response Callbacks successfully updated
   * @throws ApiError
   */
  public static addRedirectCallbackUrLs(
    data: $OpenApiTs["/api/v1/applications/{app_id}/auth_redirect_urls"]["post"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/applications/{app_id}/auth_redirect_urls"]["post"]["res"][200]
  > {
    const { appId, requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/applications/{app_id}/auth_redirect_urls",
      path: {
        app_id: appId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Replace Redirect Callback URLs
   * Replace all redirect callback URLs.
   *
   * @returns success_response Callbacks successfully updated
   * @throws ApiError
   */
  public static replaceRedirectCallbackUrLs(
    data: $OpenApiTs["/api/v1/applications/{app_id}/auth_redirect_urls"]["put"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/applications/{app_id}/auth_redirect_urls"]["put"]["res"][200]
  > {
    const { appId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/applications/{app_id}/auth_redirect_urls",
      path: {
        app_id: appId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Delete Callback URLs
   * Delete callback URLs.
   *
   * @returns success_response Callback URLs successfully deleted.
   * @throws ApiError
   */
  public static deleteCallbackUrLs(
    data: $OpenApiTs["/api/v1/applications/{app_id}/auth_redirect_urls"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/applications/{app_id}/auth_redirect_urls"]["delete"]["res"][200]
  > {
    const { appId, urls } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/applications/{app_id}/auth_redirect_urls",
      path: {
        app_id: appId,
      },
      query: {
        urls,
      },
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * List Logout URLs
   * Returns an application's logout redirect URLs.
   *
   * @returns logout_redirect_urls Logout URLs successfully retrieved.
   * @throws ApiError
   */
  public static getLogoutUrLs(
    data: $OpenApiTs["/api/v1/applications/{app_id}/auth_logout_urls"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/applications/{app_id}/auth_logout_urls"]["get"]["res"][200]
  > {
    const { appId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/applications/{app_id}/auth_logout_urls",
      path: {
        app_id: appId,
      },
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Add Logout Redirect URLs
   * Add additional logout redirect URLs.
   *
   * @returns success_response Logouts successfully updated
   * @throws ApiError
   */
  public static addLogoutRedirectUrLs(
    data: $OpenApiTs["/api/v1/applications/{app_id}/auth_logout_urls"]["post"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/applications/{app_id}/auth_logout_urls"]["post"]["res"][200]
  > {
    const { appId, requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/applications/{app_id}/auth_logout_urls",
      path: {
        app_id: appId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Replace Logout Redirect URLs
   * Replace all logout redirect URLs.
   *
   * @returns success_response Logout URLs successfully updated
   * @throws ApiError
   */
  public static replaceLogoutRedirectUrLs(
    data: $OpenApiTs["/api/v1/applications/{app_id}/auth_logout_urls"]["put"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/applications/{app_id}/auth_logout_urls"]["put"]["res"][200]
  > {
    const { appId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/applications/{app_id}/auth_logout_urls",
      path: {
        app_id: appId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Delete Logout URLs
   * Delete logout URLs.
   *
   * @returns success_response Logout URLs successfully deleted.
   * @throws ApiError
   */
  public static deleteLogoutUrLs(
    data: $OpenApiTs["/api/v1/applications/{app_id}/auth_logout_urls"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/applications/{app_id}/auth_logout_urls"]["delete"]["res"][200]
  > {
    const { appId, urls } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/applications/{app_id}/auth_logout_urls",
      path: {
        app_id: appId,
      },
      query: {
        urls,
      },
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }
}

export class ApIs {
  /**
   * List APIs
   * Returns a list of APIs.
   *
   * @returns apis APIs successfully retrieved.
   * @throws ApiError
   */
  public static getApIs(): CancelablePromise<
    $OpenApiTs["/api/v1/apis"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/apis",
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Add APIs
   * Add APIs.
   *
   * @returns success_response APIs successfully updated
   * @throws ApiError
   */
  public static addApIs(
    data: $OpenApiTs["/api/v1/apis"]["post"]["req"],
  ): CancelablePromise<$OpenApiTs["/api/v1/apis"]["post"]["res"][200]> {
    const { requestBody } = data;
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/apis",
      body: requestBody,
      mediaType: "application/json",
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * List API details
   * Returns the details of the API.
   *
   * @returns api API successfully retrieved.
   * @throws ApiError
   */
  public static getApi(
    data: $OpenApiTs["/api/v1/apis/{api_id}"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/api/v1/apis/{api_id}"]["get"]["res"][200]> {
    const { apiId } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/apis/{api_id}",
      path: {
        api_id: apiId,
      },
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Delete API
   * Deletes API.
   *
   * @returns success_response API successfully deleted.
   * @throws ApiError
   */
  public static deleteApi(
    data: $OpenApiTs["/api/v1/apis/{api_id}"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/apis/{api_id}"]["delete"]["res"][200]
  > {
    const { apiId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/apis/{api_id}",
      path: {
        api_id: apiId,
      },
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }

  /**
   * Update API Applications
   * Update the applications under that API.
   *
   * @returns success_response API applications updated.
   * @throws ApiError
   */
  public static updateApiApplications(
    data: $OpenApiTs["/api/v1/apis/{api_id}/applications"]["patch"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/api/v1/apis/{api_id}/applications"]["patch"]["res"][200]
  > {
    const { apiId, requestBody } = data;
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/apis/{api_id}/applications",
      path: {
        api_id: apiId,
      },
      body: requestBody,
      mediaType: "application/json",
      errors: {
        400: `Invalid request.`,
        403: `Invalid credentials.`,
        429: `Request was throttled.`,
      },
    });
  }
}
